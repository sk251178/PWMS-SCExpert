//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ExpertObjectMapper.DataTemplate {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("TRANSHIPMENT")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class TRANSHIPMENT : global::System.Data.DataSet {
        
        private BUSINESSOBJECTDataTable tableBUSINESSOBJECT;
        
        private DATADataTable tableDATA;
        
        private CONTACTSDataTable tableCONTACTS;
        
        private CONTACTDataTable tableCONTACT;
        
        private global::System.Data.DataRelation relationBUSINESSOBJECT_DATA;
        
        private global::System.Data.DataRelation relationDATA_CONTACTS;
        
        private global::System.Data.DataRelation relationCONTACTS_CONTACT;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TRANSHIPMENT() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected TRANSHIPMENT(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context)
            : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["BUSINESSOBJECT"] != null)) {
                    base.Tables.Add(new BUSINESSOBJECTDataTable(ds.Tables["BUSINESSOBJECT"]));
                }
                if ((ds.Tables["DATA"] != null)) {
                    base.Tables.Add(new DATADataTable(ds.Tables["DATA"]));
                }
                if ((ds.Tables["CONTACTS"] != null)) {
                    base.Tables.Add(new CONTACTSDataTable(ds.Tables["CONTACTS"]));
                }
                if ((ds.Tables["CONTACT"] != null)) {
                    base.Tables.Add(new CONTACTDataTable(ds.Tables["CONTACT"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BUSINESSOBJECTDataTable BUSINESSOBJECT {
            get {
                return this.tableBUSINESSOBJECT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DATADataTable DATA {
            get {
                return this.tableDATA;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CONTACTSDataTable CONTACTS {
            get {
                return this.tableCONTACTS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CONTACTDataTable CONTACT {
            get {
                return this.tableCONTACT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            TRANSHIPMENT cln = ((TRANSHIPMENT)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["BUSINESSOBJECT"] != null)) {
                    base.Tables.Add(new BUSINESSOBJECTDataTable(ds.Tables["BUSINESSOBJECT"]));
                }
                if ((ds.Tables["DATA"] != null)) {
                    base.Tables.Add(new DATADataTable(ds.Tables["DATA"]));
                }
                if ((ds.Tables["CONTACTS"] != null)) {
                    base.Tables.Add(new CONTACTSDataTable(ds.Tables["CONTACTS"]));
                }
                if ((ds.Tables["CONTACT"] != null)) {
                    base.Tables.Add(new CONTACTDataTable(ds.Tables["CONTACT"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableBUSINESSOBJECT = ((BUSINESSOBJECTDataTable)(base.Tables["BUSINESSOBJECT"]));
            if ((initTable == true)) {
                if ((this.tableBUSINESSOBJECT != null)) {
                    this.tableBUSINESSOBJECT.InitVars();
                }
            }
            this.tableDATA = ((DATADataTable)(base.Tables["DATA"]));
            if ((initTable == true)) {
                if ((this.tableDATA != null)) {
                    this.tableDATA.InitVars();
                }
            }
            this.tableCONTACTS = ((CONTACTSDataTable)(base.Tables["CONTACTS"]));
            if ((initTable == true)) {
                if ((this.tableCONTACTS != null)) {
                    this.tableCONTACTS.InitVars();
                }
            }
            this.tableCONTACT = ((CONTACTDataTable)(base.Tables["CONTACT"]));
            if ((initTable == true)) {
                if ((this.tableCONTACT != null)) {
                    this.tableCONTACT.InitVars();
                }
            }
            this.relationBUSINESSOBJECT_DATA = this.Relations["BUSINESSOBJECT_DATA"];
            this.relationDATA_CONTACTS = this.Relations["DATA_CONTACTS"];
            this.relationCONTACTS_CONTACT = this.Relations["CONTACTS_CONTACT"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "TRANSHIPMENT";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/TRANSHIPMENT.xsd";
            this.Locale = new global::System.Globalization.CultureInfo("");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableBUSINESSOBJECT = new BUSINESSOBJECTDataTable();
            base.Tables.Add(this.tableBUSINESSOBJECT);
            this.tableDATA = new DATADataTable();
            base.Tables.Add(this.tableDATA);
            this.tableCONTACTS = new CONTACTSDataTable();
            base.Tables.Add(this.tableCONTACTS);
            this.tableCONTACT = new CONTACTDataTable();
            base.Tables.Add(this.tableCONTACT);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("BUSINESSOBJECT_DATA", new global::System.Data.DataColumn[] {
                        this.tableBUSINESSOBJECT.BUSINESSOBJECT_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableDATA.BUSINESSOBJECT_IdColumn});
            this.tableDATA.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("DATA_CONTACTS", new global::System.Data.DataColumn[] {
                        this.tableDATA.DATA_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCONTACTS.DATA_IdColumn});
            this.tableCONTACTS.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CONTACTS_CONTACT", new global::System.Data.DataColumn[] {
                        this.tableCONTACTS.CONTACTS_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCONTACT.CONTACTS_IdColumn});
            this.tableCONTACT.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationBUSINESSOBJECT_DATA = new global::System.Data.DataRelation("BUSINESSOBJECT_DATA", new global::System.Data.DataColumn[] {
                        this.tableBUSINESSOBJECT.BUSINESSOBJECT_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableDATA.BUSINESSOBJECT_IdColumn}, false);
            this.relationBUSINESSOBJECT_DATA.Nested = true;
            this.Relations.Add(this.relationBUSINESSOBJECT_DATA);
            this.relationDATA_CONTACTS = new global::System.Data.DataRelation("DATA_CONTACTS", new global::System.Data.DataColumn[] {
                        this.tableDATA.DATA_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCONTACTS.DATA_IdColumn}, false);
            this.relationDATA_CONTACTS.Nested = true;
            this.Relations.Add(this.relationDATA_CONTACTS);
            this.relationCONTACTS_CONTACT = new global::System.Data.DataRelation("CONTACTS_CONTACT", new global::System.Data.DataColumn[] {
                        this.tableCONTACTS.CONTACTS_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCONTACT.CONTACTS_IdColumn}, false);
            this.relationCONTACTS_CONTACT.Nested = true;
            this.Relations.Add(this.relationCONTACTS_CONTACT);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBUSINESSOBJECT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDATA() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCONTACTS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCONTACT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            TRANSHIPMENT ds = new TRANSHIPMENT();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void BUSINESSOBJECTRowChangeEventHandler(object sender, BUSINESSOBJECTRowChangeEvent e);
        
        public delegate void DATARowChangeEventHandler(object sender, DATARowChangeEvent e);
        
        public delegate void CONTACTSRowChangeEventHandler(object sender, CONTACTSRowChangeEvent e);
        
        public delegate void CONTACTRowChangeEventHandler(object sender, CONTACTRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BUSINESSOBJECTDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnBOTYPE;
            
            private global::System.Data.DataColumn columnDATACOLLECTION;
            
            private global::System.Data.DataColumn columnBUSINESSOBJECT_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BUSINESSOBJECTDataTable() {
                this.TableName = "BUSINESSOBJECT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BUSINESSOBJECTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BUSINESSOBJECTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BOTYPEColumn {
                get {
                    return this.columnBOTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DATACOLLECTIONColumn {
                get {
                    return this.columnDATACOLLECTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BUSINESSOBJECT_IdColumn {
                get {
                    return this.columnBUSINESSOBJECT_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BUSINESSOBJECTRow this[int index] {
                get {
                    return ((BUSINESSOBJECTRow)(this.Rows[index]));
                }
            }
            
            public event BUSINESSOBJECTRowChangeEventHandler BUSINESSOBJECTRowChanging;
            
            public event BUSINESSOBJECTRowChangeEventHandler BUSINESSOBJECTRowChanged;
            
            public event BUSINESSOBJECTRowChangeEventHandler BUSINESSOBJECTRowDeleting;
            
            public event BUSINESSOBJECTRowChangeEventHandler BUSINESSOBJECTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBUSINESSOBJECTRow(BUSINESSOBJECTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BUSINESSOBJECTRow AddBUSINESSOBJECTRow(string BOTYPE, string DATACOLLECTION) {
                BUSINESSOBJECTRow rowBUSINESSOBJECTRow = ((BUSINESSOBJECTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BOTYPE,
                        DATACOLLECTION,
                        null};
                rowBUSINESSOBJECTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBUSINESSOBJECTRow);
                return rowBUSINESSOBJECTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BUSINESSOBJECTDataTable cln = ((BUSINESSOBJECTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BUSINESSOBJECTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBOTYPE = base.Columns["BOTYPE"];
                this.columnDATACOLLECTION = base.Columns["DATACOLLECTION"];
                this.columnBUSINESSOBJECT_Id = base.Columns["BUSINESSOBJECT_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBOTYPE = new global::System.Data.DataColumn("BOTYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBOTYPE);
                this.columnDATACOLLECTION = new global::System.Data.DataColumn("DATACOLLECTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATACOLLECTION);
                this.columnBUSINESSOBJECT_Id = new global::System.Data.DataColumn("BUSINESSOBJECT_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnBUSINESSOBJECT_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnBUSINESSOBJECT_Id}, true));
                this.columnBOTYPE.AllowDBNull = false;
                this.columnDATACOLLECTION.AllowDBNull = false;
                this.columnBUSINESSOBJECT_Id.AutoIncrement = true;
                this.columnBUSINESSOBJECT_Id.AllowDBNull = false;
                this.columnBUSINESSOBJECT_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BUSINESSOBJECTRow NewBUSINESSOBJECTRow() {
                return ((BUSINESSOBJECTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BUSINESSOBJECTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BUSINESSOBJECTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BUSINESSOBJECTRowChanged != null)) {
                    this.BUSINESSOBJECTRowChanged(this, new BUSINESSOBJECTRowChangeEvent(((BUSINESSOBJECTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BUSINESSOBJECTRowChanging != null)) {
                    this.BUSINESSOBJECTRowChanging(this, new BUSINESSOBJECTRowChangeEvent(((BUSINESSOBJECTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BUSINESSOBJECTRowDeleted != null)) {
                    this.BUSINESSOBJECTRowDeleted(this, new BUSINESSOBJECTRowChangeEvent(((BUSINESSOBJECTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BUSINESSOBJECTRowDeleting != null)) {
                    this.BUSINESSOBJECTRowDeleting(this, new BUSINESSOBJECTRowChangeEvent(((BUSINESSOBJECTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBUSINESSOBJECTRow(BUSINESSOBJECTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TRANSHIPMENT ds = new TRANSHIPMENT();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BUSINESSOBJECTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DATADataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCONSIGNEE;
            
            private global::System.Data.DataColumn columnTRANSSHIPMENT;
            
            private global::System.Data.DataColumn columnORDERTYPE;
            
            private global::System.Data.DataColumn columnREFERENCEORD;
            
            private global::System.Data.DataColumn columnSOURCECOMPANY;
            
            private global::System.Data.DataColumn columnSOURCECOMPANYTYPE;
            
            private global::System.Data.DataColumn columnTARGETCOMPANY;
            
            private global::System.Data.DataColumn columnTARGETCOMPANYTYPE;
            
            private global::System.Data.DataColumn columnNOTES;
            
            private global::System.Data.DataColumn columnSTATUS;
            
            private global::System.Data.DataColumn columnSTATUSDATE;
            
            private global::System.Data.DataColumn columnCREATEDATE;
            
            private global::System.Data.DataColumn columnSCHEDULEDARRIVALDATE;
            
            private global::System.Data.DataColumn columnREQUESTEDDELIVERYDATE;
            
            private global::System.Data.DataColumn columnSCHEDULEDDELIVERYDATE;
            
            private global::System.Data.DataColumn columnSHIPPEDDATE;
            
            private global::System.Data.DataColumn columnSTAGINGLANE;
            
            private global::System.Data.DataColumn columnSHIPMENT;
            
            private global::System.Data.DataColumn columnSTOPNUMBER;
            
            private global::System.Data.DataColumn columnLOADINGSEQ;
            
            private global::System.Data.DataColumn columnROUTINGSET;
            
            private global::System.Data.DataColumn columnROUTE;
            
            private global::System.Data.DataColumn columnDELIVERYSTATUS;
            
            private global::System.Data.DataColumn columnORDERPRIORITY;
            
            private global::System.Data.DataColumn columnPOD;
            
            private global::System.Data.DataColumn columnEXPECTEDQTY;
            
            private global::System.Data.DataColumn columnRECEIVEDQTY;
            
            private global::System.Data.DataColumn columnEXPECTEDWEIGHT;
            
            private global::System.Data.DataColumn columnRECEIVEWEIGHT;
            
            private global::System.Data.DataColumn columnRECEIVEDFROM;
            
            private global::System.Data.DataColumn columnSHIPTO;
            
            private global::System.Data.DataColumn columnDATA_Id;
            
            private global::System.Data.DataColumn columnBUSINESSOBJECT_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DATADataTable() {
                this.TableName = "DATA";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DATADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DATADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONSIGNEEColumn {
                get {
                    return this.columnCONSIGNEE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TRANSSHIPMENTColumn {
                get {
                    return this.columnTRANSSHIPMENT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORDERTYPEColumn {
                get {
                    return this.columnORDERTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REFERENCEORDColumn {
                get {
                    return this.columnREFERENCEORD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SOURCECOMPANYColumn {
                get {
                    return this.columnSOURCECOMPANY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SOURCECOMPANYTYPEColumn {
                get {
                    return this.columnSOURCECOMPANYTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TARGETCOMPANYColumn {
                get {
                    return this.columnTARGETCOMPANY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TARGETCOMPANYTYPEColumn {
                get {
                    return this.columnTARGETCOMPANYTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NOTESColumn {
                get {
                    return this.columnNOTES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATUSColumn {
                get {
                    return this.columnSTATUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATUSDATEColumn {
                get {
                    return this.columnSTATUSDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATEDATEColumn {
                get {
                    return this.columnCREATEDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SCHEDULEDARRIVALDATEColumn {
                get {
                    return this.columnSCHEDULEDARRIVALDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REQUESTEDDELIVERYDATEColumn {
                get {
                    return this.columnREQUESTEDDELIVERYDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SCHEDULEDDELIVERYDATEColumn {
                get {
                    return this.columnSCHEDULEDDELIVERYDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SHIPPEDDATEColumn {
                get {
                    return this.columnSHIPPEDDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STAGINGLANEColumn {
                get {
                    return this.columnSTAGINGLANE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SHIPMENTColumn {
                get {
                    return this.columnSHIPMENT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STOPNUMBERColumn {
                get {
                    return this.columnSTOPNUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOADINGSEQColumn {
                get {
                    return this.columnLOADINGSEQ;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ROUTINGSETColumn {
                get {
                    return this.columnROUTINGSET;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ROUTEColumn {
                get {
                    return this.columnROUTE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DELIVERYSTATUSColumn {
                get {
                    return this.columnDELIVERYSTATUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORDERPRIORITYColumn {
                get {
                    return this.columnORDERPRIORITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PODColumn {
                get {
                    return this.columnPOD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXPECTEDQTYColumn {
                get {
                    return this.columnEXPECTEDQTY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RECEIVEDQTYColumn {
                get {
                    return this.columnRECEIVEDQTY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXPECTEDWEIGHTColumn {
                get {
                    return this.columnEXPECTEDWEIGHT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RECEIVEWEIGHTColumn {
                get {
                    return this.columnRECEIVEWEIGHT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RECEIVEDFROMColumn {
                get {
                    return this.columnRECEIVEDFROM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SHIPTOColumn {
                get {
                    return this.columnSHIPTO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DATA_IdColumn {
                get {
                    return this.columnDATA_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BUSINESSOBJECT_IdColumn {
                get {
                    return this.columnBUSINESSOBJECT_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DATARow this[int index] {
                get {
                    return ((DATARow)(this.Rows[index]));
                }
            }
            
            public event DATARowChangeEventHandler DATARowChanging;
            
            public event DATARowChangeEventHandler DATARowChanged;
            
            public event DATARowChangeEventHandler DATARowDeleting;
            
            public event DATARowChangeEventHandler DATARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDATARow(DATARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DATARow AddDATARow(
                        string CONSIGNEE, 
                        string TRANSSHIPMENT, 
                        string ORDERTYPE, 
                        string REFERENCEORD, 
                        string SOURCECOMPANY, 
                        string SOURCECOMPANYTYPE, 
                        string TARGETCOMPANY, 
                        string TARGETCOMPANYTYPE, 
                        string NOTES, 
                        string STATUS, 
                        System.DateTime STATUSDATE, 
                        System.DateTime CREATEDATE, 
                        System.DateTime SCHEDULEDARRIVALDATE, 
                        System.DateTime REQUESTEDDELIVERYDATE, 
                        System.DateTime SCHEDULEDDELIVERYDATE, 
                        System.DateTime SHIPPEDDATE, 
                        string STAGINGLANE, 
                        string SHIPMENT, 
                        int STOPNUMBER, 
                        string LOADINGSEQ, 
                        string ROUTINGSET, 
                        string ROUTE, 
                        string DELIVERYSTATUS, 
                        int ORDERPRIORITY, 
                        string POD, 
                        decimal EXPECTEDQTY, 
                        decimal RECEIVEDQTY, 
                        decimal EXPECTEDWEIGHT, 
                        decimal RECEIVEWEIGHT, 
                        string RECEIVEDFROM, 
                        string SHIPTO, 
                        BUSINESSOBJECTRow parentBUSINESSOBJECTRowByBUSINESSOBJECT_DATA) {
                DATARow rowDATARow = ((DATARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CONSIGNEE,
                        TRANSSHIPMENT,
                        ORDERTYPE,
                        REFERENCEORD,
                        SOURCECOMPANY,
                        SOURCECOMPANYTYPE,
                        TARGETCOMPANY,
                        TARGETCOMPANYTYPE,
                        NOTES,
                        STATUS,
                        STATUSDATE,
                        CREATEDATE,
                        SCHEDULEDARRIVALDATE,
                        REQUESTEDDELIVERYDATE,
                        SCHEDULEDDELIVERYDATE,
                        SHIPPEDDATE,
                        STAGINGLANE,
                        SHIPMENT,
                        STOPNUMBER,
                        LOADINGSEQ,
                        ROUTINGSET,
                        ROUTE,
                        DELIVERYSTATUS,
                        ORDERPRIORITY,
                        POD,
                        EXPECTEDQTY,
                        RECEIVEDQTY,
                        EXPECTEDWEIGHT,
                        RECEIVEWEIGHT,
                        RECEIVEDFROM,
                        SHIPTO,
                        null,
                        null};
                if ((parentBUSINESSOBJECTRowByBUSINESSOBJECT_DATA != null)) {
                    columnValuesArray[32] = parentBUSINESSOBJECTRowByBUSINESSOBJECT_DATA[2];
                }
                rowDATARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDATARow);
                return rowDATARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DATADataTable cln = ((DATADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DATADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCONSIGNEE = base.Columns["CONSIGNEE"];
                this.columnTRANSSHIPMENT = base.Columns["TRANSSHIPMENT"];
                this.columnORDERTYPE = base.Columns["ORDERTYPE"];
                this.columnREFERENCEORD = base.Columns["REFERENCEORD"];
                this.columnSOURCECOMPANY = base.Columns["SOURCECOMPANY"];
                this.columnSOURCECOMPANYTYPE = base.Columns["SOURCECOMPANYTYPE"];
                this.columnTARGETCOMPANY = base.Columns["TARGETCOMPANY"];
                this.columnTARGETCOMPANYTYPE = base.Columns["TARGETCOMPANYTYPE"];
                this.columnNOTES = base.Columns["NOTES"];
                this.columnSTATUS = base.Columns["STATUS"];
                this.columnSTATUSDATE = base.Columns["STATUSDATE"];
                this.columnCREATEDATE = base.Columns["CREATEDATE"];
                this.columnSCHEDULEDARRIVALDATE = base.Columns["SCHEDULEDARRIVALDATE"];
                this.columnREQUESTEDDELIVERYDATE = base.Columns["REQUESTEDDELIVERYDATE"];
                this.columnSCHEDULEDDELIVERYDATE = base.Columns["SCHEDULEDDELIVERYDATE"];
                this.columnSHIPPEDDATE = base.Columns["SHIPPEDDATE"];
                this.columnSTAGINGLANE = base.Columns["STAGINGLANE"];
                this.columnSHIPMENT = base.Columns["SHIPMENT"];
                this.columnSTOPNUMBER = base.Columns["STOPNUMBER"];
                this.columnLOADINGSEQ = base.Columns["LOADINGSEQ"];
                this.columnROUTINGSET = base.Columns["ROUTINGSET"];
                this.columnROUTE = base.Columns["ROUTE"];
                this.columnDELIVERYSTATUS = base.Columns["DELIVERYSTATUS"];
                this.columnORDERPRIORITY = base.Columns["ORDERPRIORITY"];
                this.columnPOD = base.Columns["POD"];
                this.columnEXPECTEDQTY = base.Columns["EXPECTEDQTY"];
                this.columnRECEIVEDQTY = base.Columns["RECEIVEDQTY"];
                this.columnEXPECTEDWEIGHT = base.Columns["EXPECTEDWEIGHT"];
                this.columnRECEIVEWEIGHT = base.Columns["RECEIVEWEIGHT"];
                this.columnRECEIVEDFROM = base.Columns["RECEIVEDFROM"];
                this.columnSHIPTO = base.Columns["SHIPTO"];
                this.columnDATA_Id = base.Columns["DATA_Id"];
                this.columnBUSINESSOBJECT_Id = base.Columns["BUSINESSOBJECT_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCONSIGNEE = new global::System.Data.DataColumn("CONSIGNEE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONSIGNEE);
                this.columnTRANSSHIPMENT = new global::System.Data.DataColumn("TRANSSHIPMENT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRANSSHIPMENT);
                this.columnORDERTYPE = new global::System.Data.DataColumn("ORDERTYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORDERTYPE);
                this.columnREFERENCEORD = new global::System.Data.DataColumn("REFERENCEORD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREFERENCEORD);
                this.columnSOURCECOMPANY = new global::System.Data.DataColumn("SOURCECOMPANY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSOURCECOMPANY);
                this.columnSOURCECOMPANYTYPE = new global::System.Data.DataColumn("SOURCECOMPANYTYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSOURCECOMPANYTYPE);
                this.columnTARGETCOMPANY = new global::System.Data.DataColumn("TARGETCOMPANY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTARGETCOMPANY);
                this.columnTARGETCOMPANYTYPE = new global::System.Data.DataColumn("TARGETCOMPANYTYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTARGETCOMPANYTYPE);
                this.columnNOTES = new global::System.Data.DataColumn("NOTES", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOTES);
                this.columnSTATUS = new global::System.Data.DataColumn("STATUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATUS);
                this.columnSTATUSDATE = new global::System.Data.DataColumn("STATUSDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATUSDATE);
                this.columnCREATEDATE = new global::System.Data.DataColumn("CREATEDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATEDATE);
                this.columnSCHEDULEDARRIVALDATE = new global::System.Data.DataColumn("SCHEDULEDARRIVALDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSCHEDULEDARRIVALDATE);
                this.columnREQUESTEDDELIVERYDATE = new global::System.Data.DataColumn("REQUESTEDDELIVERYDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREQUESTEDDELIVERYDATE);
                this.columnSCHEDULEDDELIVERYDATE = new global::System.Data.DataColumn("SCHEDULEDDELIVERYDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSCHEDULEDDELIVERYDATE);
                this.columnSHIPPEDDATE = new global::System.Data.DataColumn("SHIPPEDDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSHIPPEDDATE);
                this.columnSTAGINGLANE = new global::System.Data.DataColumn("STAGINGLANE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTAGINGLANE);
                this.columnSHIPMENT = new global::System.Data.DataColumn("SHIPMENT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSHIPMENT);
                this.columnSTOPNUMBER = new global::System.Data.DataColumn("STOPNUMBER", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTOPNUMBER);
                this.columnLOADINGSEQ = new global::System.Data.DataColumn("LOADINGSEQ", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOADINGSEQ);
                this.columnROUTINGSET = new global::System.Data.DataColumn("ROUTINGSET", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnROUTINGSET);
                this.columnROUTE = new global::System.Data.DataColumn("ROUTE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnROUTE);
                this.columnDELIVERYSTATUS = new global::System.Data.DataColumn("DELIVERYSTATUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDELIVERYSTATUS);
                this.columnORDERPRIORITY = new global::System.Data.DataColumn("ORDERPRIORITY", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORDERPRIORITY);
                this.columnPOD = new global::System.Data.DataColumn("POD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPOD);
                this.columnEXPECTEDQTY = new global::System.Data.DataColumn("EXPECTEDQTY", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXPECTEDQTY);
                this.columnRECEIVEDQTY = new global::System.Data.DataColumn("RECEIVEDQTY", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRECEIVEDQTY);
                this.columnEXPECTEDWEIGHT = new global::System.Data.DataColumn("EXPECTEDWEIGHT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXPECTEDWEIGHT);
                this.columnRECEIVEWEIGHT = new global::System.Data.DataColumn("RECEIVEWEIGHT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRECEIVEWEIGHT);
                this.columnRECEIVEDFROM = new global::System.Data.DataColumn("RECEIVEDFROM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRECEIVEDFROM);
                this.columnSHIPTO = new global::System.Data.DataColumn("SHIPTO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSHIPTO);
                this.columnDATA_Id = new global::System.Data.DataColumn("DATA_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDATA_Id);
                this.columnBUSINESSOBJECT_Id = new global::System.Data.DataColumn("BUSINESSOBJECT_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnBUSINESSOBJECT_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDATA_Id}, true));
                this.columnCONSIGNEE.AllowDBNull = false;
                this.columnTRANSSHIPMENT.AllowDBNull = false;
                this.columnORDERTYPE.AllowDBNull = false;
                this.columnREFERENCEORD.AllowDBNull = false;
                this.columnSOURCECOMPANY.AllowDBNull = false;
                this.columnSOURCECOMPANYTYPE.AllowDBNull = false;
                this.columnTARGETCOMPANY.AllowDBNull = false;
                this.columnTARGETCOMPANYTYPE.AllowDBNull = false;
                this.columnNOTES.AllowDBNull = false;
                this.columnSTATUS.AllowDBNull = false;
                this.columnSTATUSDATE.AllowDBNull = false;
                this.columnCREATEDATE.AllowDBNull = false;
                this.columnSCHEDULEDARRIVALDATE.AllowDBNull = false;
                this.columnREQUESTEDDELIVERYDATE.AllowDBNull = false;
                this.columnSCHEDULEDDELIVERYDATE.AllowDBNull = false;
                this.columnSHIPPEDDATE.AllowDBNull = false;
                this.columnSTAGINGLANE.AllowDBNull = false;
                this.columnSHIPMENT.AllowDBNull = false;
                this.columnSTOPNUMBER.AllowDBNull = false;
                this.columnLOADINGSEQ.AllowDBNull = false;
                this.columnROUTINGSET.AllowDBNull = false;
                this.columnROUTE.AllowDBNull = false;
                this.columnDELIVERYSTATUS.AllowDBNull = false;
                this.columnORDERPRIORITY.AllowDBNull = false;
                this.columnPOD.AllowDBNull = false;
                this.columnEXPECTEDQTY.AllowDBNull = false;
                this.columnRECEIVEDQTY.AllowDBNull = false;
                this.columnEXPECTEDWEIGHT.AllowDBNull = false;
                this.columnRECEIVEWEIGHT.AllowDBNull = false;
                this.columnRECEIVEDFROM.AllowDBNull = false;
                this.columnSHIPTO.AllowDBNull = false;
                this.columnDATA_Id.AutoIncrement = true;
                this.columnDATA_Id.AllowDBNull = false;
                this.columnDATA_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DATARow NewDATARow() {
                return ((DATARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DATARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DATARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DATARowChanged != null)) {
                    this.DATARowChanged(this, new DATARowChangeEvent(((DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DATARowChanging != null)) {
                    this.DATARowChanging(this, new DATARowChangeEvent(((DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DATARowDeleted != null)) {
                    this.DATARowDeleted(this, new DATARowChangeEvent(((DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DATARowDeleting != null)) {
                    this.DATARowDeleting(this, new DATARowChangeEvent(((DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDATARow(DATARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TRANSHIPMENT ds = new TRANSHIPMENT();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DATADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CONTACTSDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCONTACTS_Id;
            
            private global::System.Data.DataColumn columnDATA_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONTACTSDataTable() {
                this.TableName = "CONTACTS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CONTACTSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CONTACTSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONTACTS_IdColumn {
                get {
                    return this.columnCONTACTS_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DATA_IdColumn {
                get {
                    return this.columnDATA_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONTACTSRow this[int index] {
                get {
                    return ((CONTACTSRow)(this.Rows[index]));
                }
            }
            
            public event CONTACTSRowChangeEventHandler CONTACTSRowChanging;
            
            public event CONTACTSRowChangeEventHandler CONTACTSRowChanged;
            
            public event CONTACTSRowChangeEventHandler CONTACTSRowDeleting;
            
            public event CONTACTSRowChangeEventHandler CONTACTSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCONTACTSRow(CONTACTSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONTACTSRow AddCONTACTSRow(DATARow parentDATARowByDATA_CONTACTS) {
                CONTACTSRow rowCONTACTSRow = ((CONTACTSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentDATARowByDATA_CONTACTS != null)) {
                    columnValuesArray[1] = parentDATARowByDATA_CONTACTS[31];
                }
                rowCONTACTSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCONTACTSRow);
                return rowCONTACTSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CONTACTSDataTable cln = ((CONTACTSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CONTACTSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCONTACTS_Id = base.Columns["CONTACTS_Id"];
                this.columnDATA_Id = base.Columns["DATA_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCONTACTS_Id = new global::System.Data.DataColumn("CONTACTS_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCONTACTS_Id);
                this.columnDATA_Id = new global::System.Data.DataColumn("DATA_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDATA_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCONTACTS_Id}, true));
                this.columnCONTACTS_Id.AutoIncrement = true;
                this.columnCONTACTS_Id.AllowDBNull = false;
                this.columnCONTACTS_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONTACTSRow NewCONTACTSRow() {
                return ((CONTACTSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CONTACTSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CONTACTSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CONTACTSRowChanged != null)) {
                    this.CONTACTSRowChanged(this, new CONTACTSRowChangeEvent(((CONTACTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CONTACTSRowChanging != null)) {
                    this.CONTACTSRowChanging(this, new CONTACTSRowChangeEvent(((CONTACTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CONTACTSRowDeleted != null)) {
                    this.CONTACTSRowDeleted(this, new CONTACTSRowChangeEvent(((CONTACTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CONTACTSRowDeleting != null)) {
                    this.CONTACTSRowDeleting(this, new CONTACTSRowChangeEvent(((CONTACTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCONTACTSRow(CONTACTSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TRANSHIPMENT ds = new TRANSHIPMENT();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CONTACTSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CONTACTDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSTREET1;
            
            private global::System.Data.DataColumn columnSTREET2;
            
            private global::System.Data.DataColumn columnCITY;
            
            private global::System.Data.DataColumn columnSTATE;
            
            private global::System.Data.DataColumn columnZIP;
            
            private global::System.Data.DataColumn columnCONTACT1NAME;
            
            private global::System.Data.DataColumn columnCONTACT2NAME;
            
            private global::System.Data.DataColumn columnCONTACT1PHONE;
            
            private global::System.Data.DataColumn columnCONTACT2PHONE;
            
            private global::System.Data.DataColumn columnCONTACT1FAX;
            
            private global::System.Data.DataColumn columnCONTACT2FAX;
            
            private global::System.Data.DataColumn columnCONTACT1EMAIL;
            
            private global::System.Data.DataColumn columnCONTACT2EMAIL;
            
            private global::System.Data.DataColumn columnPOINTID;
            
            private global::System.Data.DataColumn columnCONTACTS_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONTACTDataTable() {
                this.TableName = "CONTACT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CONTACTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CONTACTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STREET1Column {
                get {
                    return this.columnSTREET1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STREET2Column {
                get {
                    return this.columnSTREET2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CITYColumn {
                get {
                    return this.columnCITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATEColumn {
                get {
                    return this.columnSTATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZIPColumn {
                get {
                    return this.columnZIP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONTACT1NAMEColumn {
                get {
                    return this.columnCONTACT1NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONTACT2NAMEColumn {
                get {
                    return this.columnCONTACT2NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONTACT1PHONEColumn {
                get {
                    return this.columnCONTACT1PHONE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONTACT2PHONEColumn {
                get {
                    return this.columnCONTACT2PHONE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONTACT1FAXColumn {
                get {
                    return this.columnCONTACT1FAX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONTACT2FAXColumn {
                get {
                    return this.columnCONTACT2FAX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONTACT1EMAILColumn {
                get {
                    return this.columnCONTACT1EMAIL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONTACT2EMAILColumn {
                get {
                    return this.columnCONTACT2EMAIL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn POINTIDColumn {
                get {
                    return this.columnPOINTID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONTACTS_IdColumn {
                get {
                    return this.columnCONTACTS_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONTACTRow this[int index] {
                get {
                    return ((CONTACTRow)(this.Rows[index]));
                }
            }
            
            public event CONTACTRowChangeEventHandler CONTACTRowChanging;
            
            public event CONTACTRowChangeEventHandler CONTACTRowChanged;
            
            public event CONTACTRowChangeEventHandler CONTACTRowDeleting;
            
            public event CONTACTRowChangeEventHandler CONTACTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCONTACTRow(CONTACTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONTACTRow AddCONTACTRow(string STREET1, string STREET2, string CITY, string STATE, string ZIP, string CONTACT1NAME, string CONTACT2NAME, string CONTACT1PHONE, string CONTACT2PHONE, string CONTACT1FAX, string CONTACT2FAX, string CONTACT1EMAIL, string CONTACT2EMAIL, string POINTID, CONTACTSRow parentCONTACTSRowByCONTACTS_CONTACT) {
                CONTACTRow rowCONTACTRow = ((CONTACTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        STREET1,
                        STREET2,
                        CITY,
                        STATE,
                        ZIP,
                        CONTACT1NAME,
                        CONTACT2NAME,
                        CONTACT1PHONE,
                        CONTACT2PHONE,
                        CONTACT1FAX,
                        CONTACT2FAX,
                        CONTACT1EMAIL,
                        CONTACT2EMAIL,
                        POINTID,
                        null};
                if ((parentCONTACTSRowByCONTACTS_CONTACT != null)) {
                    columnValuesArray[14] = parentCONTACTSRowByCONTACTS_CONTACT[0];
                }
                rowCONTACTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCONTACTRow);
                return rowCONTACTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CONTACTDataTable cln = ((CONTACTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CONTACTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSTREET1 = base.Columns["STREET1"];
                this.columnSTREET2 = base.Columns["STREET2"];
                this.columnCITY = base.Columns["CITY"];
                this.columnSTATE = base.Columns["STATE"];
                this.columnZIP = base.Columns["ZIP"];
                this.columnCONTACT1NAME = base.Columns["CONTACT1NAME"];
                this.columnCONTACT2NAME = base.Columns["CONTACT2NAME"];
                this.columnCONTACT1PHONE = base.Columns["CONTACT1PHONE"];
                this.columnCONTACT2PHONE = base.Columns["CONTACT2PHONE"];
                this.columnCONTACT1FAX = base.Columns["CONTACT1FAX"];
                this.columnCONTACT2FAX = base.Columns["CONTACT2FAX"];
                this.columnCONTACT1EMAIL = base.Columns["CONTACT1EMAIL"];
                this.columnCONTACT2EMAIL = base.Columns["CONTACT2EMAIL"];
                this.columnPOINTID = base.Columns["POINTID"];
                this.columnCONTACTS_Id = base.Columns["CONTACTS_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSTREET1 = new global::System.Data.DataColumn("STREET1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTREET1);
                this.columnSTREET2 = new global::System.Data.DataColumn("STREET2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTREET2);
                this.columnCITY = new global::System.Data.DataColumn("CITY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCITY);
                this.columnSTATE = new global::System.Data.DataColumn("STATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATE);
                this.columnZIP = new global::System.Data.DataColumn("ZIP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZIP);
                this.columnCONTACT1NAME = new global::System.Data.DataColumn("CONTACT1NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTACT1NAME);
                this.columnCONTACT2NAME = new global::System.Data.DataColumn("CONTACT2NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTACT2NAME);
                this.columnCONTACT1PHONE = new global::System.Data.DataColumn("CONTACT1PHONE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTACT1PHONE);
                this.columnCONTACT2PHONE = new global::System.Data.DataColumn("CONTACT2PHONE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTACT2PHONE);
                this.columnCONTACT1FAX = new global::System.Data.DataColumn("CONTACT1FAX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTACT1FAX);
                this.columnCONTACT2FAX = new global::System.Data.DataColumn("CONTACT2FAX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTACT2FAX);
                this.columnCONTACT1EMAIL = new global::System.Data.DataColumn("CONTACT1EMAIL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTACT1EMAIL);
                this.columnCONTACT2EMAIL = new global::System.Data.DataColumn("CONTACT2EMAIL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTACT2EMAIL);
                this.columnPOINTID = new global::System.Data.DataColumn("POINTID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPOINTID);
                this.columnCONTACTS_Id = new global::System.Data.DataColumn("CONTACTS_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCONTACTS_Id);
                this.columnSTREET1.AllowDBNull = false;
                this.columnSTREET2.AllowDBNull = false;
                this.columnCITY.AllowDBNull = false;
                this.columnSTATE.AllowDBNull = false;
                this.columnZIP.AllowDBNull = false;
                this.columnCONTACT1NAME.AllowDBNull = false;
                this.columnCONTACT2NAME.AllowDBNull = false;
                this.columnCONTACT1PHONE.AllowDBNull = false;
                this.columnCONTACT2PHONE.AllowDBNull = false;
                this.columnCONTACT1FAX.AllowDBNull = false;
                this.columnCONTACT2FAX.AllowDBNull = false;
                this.columnCONTACT1EMAIL.AllowDBNull = false;
                this.columnCONTACT2EMAIL.AllowDBNull = false;
                this.columnPOINTID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONTACTRow NewCONTACTRow() {
                return ((CONTACTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CONTACTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CONTACTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CONTACTRowChanged != null)) {
                    this.CONTACTRowChanged(this, new CONTACTRowChangeEvent(((CONTACTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CONTACTRowChanging != null)) {
                    this.CONTACTRowChanging(this, new CONTACTRowChangeEvent(((CONTACTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CONTACTRowDeleted != null)) {
                    this.CONTACTRowDeleted(this, new CONTACTRowChangeEvent(((CONTACTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CONTACTRowDeleting != null)) {
                    this.CONTACTRowDeleting(this, new CONTACTRowChangeEvent(((CONTACTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCONTACTRow(CONTACTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TRANSHIPMENT ds = new TRANSHIPMENT();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CONTACTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BUSINESSOBJECTRow : global::System.Data.DataRow {
            
            private BUSINESSOBJECTDataTable tableBUSINESSOBJECT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BUSINESSOBJECTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBUSINESSOBJECT = ((BUSINESSOBJECTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BOTYPE {
                get {
                    return ((string)(this[this.tableBUSINESSOBJECT.BOTYPEColumn]));
                }
                set {
                    this[this.tableBUSINESSOBJECT.BOTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DATACOLLECTION {
                get {
                    return ((string)(this[this.tableBUSINESSOBJECT.DATACOLLECTIONColumn]));
                }
                set {
                    this[this.tableBUSINESSOBJECT.DATACOLLECTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BUSINESSOBJECT_Id {
                get {
                    return ((int)(this[this.tableBUSINESSOBJECT.BUSINESSOBJECT_IdColumn]));
                }
                set {
                    this[this.tableBUSINESSOBJECT.BUSINESSOBJECT_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DATARow[] GetDATARows() {
                if ((this.Table.ChildRelations["BUSINESSOBJECT_DATA"] == null)) {
                    return new DATARow[0];
                }
                else {
                    return ((DATARow[])(base.GetChildRows(this.Table.ChildRelations["BUSINESSOBJECT_DATA"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DATARow : global::System.Data.DataRow {
            
            private DATADataTable tableDATA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DATARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDATA = ((DATADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONSIGNEE {
                get {
                    return ((string)(this[this.tableDATA.CONSIGNEEColumn]));
                }
                set {
                    this[this.tableDATA.CONSIGNEEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TRANSSHIPMENT {
                get {
                    return ((string)(this[this.tableDATA.TRANSSHIPMENTColumn]));
                }
                set {
                    this[this.tableDATA.TRANSSHIPMENTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORDERTYPE {
                get {
                    return ((string)(this[this.tableDATA.ORDERTYPEColumn]));
                }
                set {
                    this[this.tableDATA.ORDERTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REFERENCEORD {
                get {
                    return ((string)(this[this.tableDATA.REFERENCEORDColumn]));
                }
                set {
                    this[this.tableDATA.REFERENCEORDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SOURCECOMPANY {
                get {
                    return ((string)(this[this.tableDATA.SOURCECOMPANYColumn]));
                }
                set {
                    this[this.tableDATA.SOURCECOMPANYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SOURCECOMPANYTYPE {
                get {
                    return ((string)(this[this.tableDATA.SOURCECOMPANYTYPEColumn]));
                }
                set {
                    this[this.tableDATA.SOURCECOMPANYTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TARGETCOMPANY {
                get {
                    return ((string)(this[this.tableDATA.TARGETCOMPANYColumn]));
                }
                set {
                    this[this.tableDATA.TARGETCOMPANYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TARGETCOMPANYTYPE {
                get {
                    return ((string)(this[this.tableDATA.TARGETCOMPANYTYPEColumn]));
                }
                set {
                    this[this.tableDATA.TARGETCOMPANYTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NOTES {
                get {
                    return ((string)(this[this.tableDATA.NOTESColumn]));
                }
                set {
                    this[this.tableDATA.NOTESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATUS {
                get {
                    return ((string)(this[this.tableDATA.STATUSColumn]));
                }
                set {
                    this[this.tableDATA.STATUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime STATUSDATE {
                get {
                    return ((global::System.DateTime)(this[this.tableDATA.STATUSDATEColumn]));
                }
                set {
                    this[this.tableDATA.STATUSDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CREATEDATE {
                get {
                    return ((global::System.DateTime)(this[this.tableDATA.CREATEDATEColumn]));
                }
                set {
                    this[this.tableDATA.CREATEDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SCHEDULEDARRIVALDATE {
                get {
                    return ((global::System.DateTime)(this[this.tableDATA.SCHEDULEDARRIVALDATEColumn]));
                }
                set {
                    this[this.tableDATA.SCHEDULEDARRIVALDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime REQUESTEDDELIVERYDATE {
                get {
                    return ((global::System.DateTime)(this[this.tableDATA.REQUESTEDDELIVERYDATEColumn]));
                }
                set {
                    this[this.tableDATA.REQUESTEDDELIVERYDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SCHEDULEDDELIVERYDATE {
                get {
                    return ((global::System.DateTime)(this[this.tableDATA.SCHEDULEDDELIVERYDATEColumn]));
                }
                set {
                    this[this.tableDATA.SCHEDULEDDELIVERYDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SHIPPEDDATE {
                get {
                    return ((global::System.DateTime)(this[this.tableDATA.SHIPPEDDATEColumn]));
                }
                set {
                    this[this.tableDATA.SHIPPEDDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STAGINGLANE {
                get {
                    return ((string)(this[this.tableDATA.STAGINGLANEColumn]));
                }
                set {
                    this[this.tableDATA.STAGINGLANEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SHIPMENT {
                get {
                    return ((string)(this[this.tableDATA.SHIPMENTColumn]));
                }
                set {
                    this[this.tableDATA.SHIPMENTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int STOPNUMBER {
                get {
                    return ((int)(this[this.tableDATA.STOPNUMBERColumn]));
                }
                set {
                    this[this.tableDATA.STOPNUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LOADINGSEQ {
                get {
                    return ((string)(this[this.tableDATA.LOADINGSEQColumn]));
                }
                set {
                    this[this.tableDATA.LOADINGSEQColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ROUTINGSET {
                get {
                    return ((string)(this[this.tableDATA.ROUTINGSETColumn]));
                }
                set {
                    this[this.tableDATA.ROUTINGSETColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ROUTE {
                get {
                    return ((string)(this[this.tableDATA.ROUTEColumn]));
                }
                set {
                    this[this.tableDATA.ROUTEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DELIVERYSTATUS {
                get {
                    return ((string)(this[this.tableDATA.DELIVERYSTATUSColumn]));
                }
                set {
                    this[this.tableDATA.DELIVERYSTATUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ORDERPRIORITY {
                get {
                    return ((int)(this[this.tableDATA.ORDERPRIORITYColumn]));
                }
                set {
                    this[this.tableDATA.ORDERPRIORITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string POD {
                get {
                    return ((string)(this[this.tableDATA.PODColumn]));
                }
                set {
                    this[this.tableDATA.PODColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal EXPECTEDQTY {
                get {
                    return ((decimal)(this[this.tableDATA.EXPECTEDQTYColumn]));
                }
                set {
                    this[this.tableDATA.EXPECTEDQTYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RECEIVEDQTY {
                get {
                    return ((decimal)(this[this.tableDATA.RECEIVEDQTYColumn]));
                }
                set {
                    this[this.tableDATA.RECEIVEDQTYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal EXPECTEDWEIGHT {
                get {
                    return ((decimal)(this[this.tableDATA.EXPECTEDWEIGHTColumn]));
                }
                set {
                    this[this.tableDATA.EXPECTEDWEIGHTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RECEIVEWEIGHT {
                get {
                    return ((decimal)(this[this.tableDATA.RECEIVEWEIGHTColumn]));
                }
                set {
                    this[this.tableDATA.RECEIVEWEIGHTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RECEIVEDFROM {
                get {
                    return ((string)(this[this.tableDATA.RECEIVEDFROMColumn]));
                }
                set {
                    this[this.tableDATA.RECEIVEDFROMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SHIPTO {
                get {
                    return ((string)(this[this.tableDATA.SHIPTOColumn]));
                }
                set {
                    this[this.tableDATA.SHIPTOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DATA_Id {
                get {
                    return ((int)(this[this.tableDATA.DATA_IdColumn]));
                }
                set {
                    this[this.tableDATA.DATA_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BUSINESSOBJECT_Id {
                get {
                    try {
                        return ((int)(this[this.tableDATA.BUSINESSOBJECT_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BUSINESSOBJECT_Id\' in table \'DATA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDATA.BUSINESSOBJECT_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BUSINESSOBJECTRow BUSINESSOBJECTRow {
                get {
                    return ((BUSINESSOBJECTRow)(this.GetParentRow(this.Table.ParentRelations["BUSINESSOBJECT_DATA"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["BUSINESSOBJECT_DATA"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBUSINESSOBJECT_IdNull() {
                return this.IsNull(this.tableDATA.BUSINESSOBJECT_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBUSINESSOBJECT_IdNull() {
                this[this.tableDATA.BUSINESSOBJECT_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONTACTSRow[] GetCONTACTSRows() {
                if ((this.Table.ChildRelations["DATA_CONTACTS"] == null)) {
                    return new CONTACTSRow[0];
                }
                else {
                    return ((CONTACTSRow[])(base.GetChildRows(this.Table.ChildRelations["DATA_CONTACTS"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CONTACTSRow : global::System.Data.DataRow {
            
            private CONTACTSDataTable tableCONTACTS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CONTACTSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCONTACTS = ((CONTACTSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CONTACTS_Id {
                get {
                    return ((int)(this[this.tableCONTACTS.CONTACTS_IdColumn]));
                }
                set {
                    this[this.tableCONTACTS.CONTACTS_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DATA_Id {
                get {
                    try {
                        return ((int)(this[this.tableCONTACTS.DATA_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DATA_Id\' in table \'CONTACTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONTACTS.DATA_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DATARow DATARow {
                get {
                    return ((DATARow)(this.GetParentRow(this.Table.ParentRelations["DATA_CONTACTS"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DATA_CONTACTS"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDATA_IdNull() {
                return this.IsNull(this.tableCONTACTS.DATA_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDATA_IdNull() {
                this[this.tableCONTACTS.DATA_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONTACTRow[] GetCONTACTRows() {
                if ((this.Table.ChildRelations["CONTACTS_CONTACT"] == null)) {
                    return new CONTACTRow[0];
                }
                else {
                    return ((CONTACTRow[])(base.GetChildRows(this.Table.ChildRelations["CONTACTS_CONTACT"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CONTACTRow : global::System.Data.DataRow {
            
            private CONTACTDataTable tableCONTACT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CONTACTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCONTACT = ((CONTACTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STREET1 {
                get {
                    return ((string)(this[this.tableCONTACT.STREET1Column]));
                }
                set {
                    this[this.tableCONTACT.STREET1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STREET2 {
                get {
                    return ((string)(this[this.tableCONTACT.STREET2Column]));
                }
                set {
                    this[this.tableCONTACT.STREET2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CITY {
                get {
                    return ((string)(this[this.tableCONTACT.CITYColumn]));
                }
                set {
                    this[this.tableCONTACT.CITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATE {
                get {
                    return ((string)(this[this.tableCONTACT.STATEColumn]));
                }
                set {
                    this[this.tableCONTACT.STATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZIP {
                get {
                    return ((string)(this[this.tableCONTACT.ZIPColumn]));
                }
                set {
                    this[this.tableCONTACT.ZIPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONTACT1NAME {
                get {
                    return ((string)(this[this.tableCONTACT.CONTACT1NAMEColumn]));
                }
                set {
                    this[this.tableCONTACT.CONTACT1NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONTACT2NAME {
                get {
                    return ((string)(this[this.tableCONTACT.CONTACT2NAMEColumn]));
                }
                set {
                    this[this.tableCONTACT.CONTACT2NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONTACT1PHONE {
                get {
                    return ((string)(this[this.tableCONTACT.CONTACT1PHONEColumn]));
                }
                set {
                    this[this.tableCONTACT.CONTACT1PHONEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONTACT2PHONE {
                get {
                    return ((string)(this[this.tableCONTACT.CONTACT2PHONEColumn]));
                }
                set {
                    this[this.tableCONTACT.CONTACT2PHONEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONTACT1FAX {
                get {
                    return ((string)(this[this.tableCONTACT.CONTACT1FAXColumn]));
                }
                set {
                    this[this.tableCONTACT.CONTACT1FAXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONTACT2FAX {
                get {
                    return ((string)(this[this.tableCONTACT.CONTACT2FAXColumn]));
                }
                set {
                    this[this.tableCONTACT.CONTACT2FAXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONTACT1EMAIL {
                get {
                    return ((string)(this[this.tableCONTACT.CONTACT1EMAILColumn]));
                }
                set {
                    this[this.tableCONTACT.CONTACT1EMAILColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONTACT2EMAIL {
                get {
                    return ((string)(this[this.tableCONTACT.CONTACT2EMAILColumn]));
                }
                set {
                    this[this.tableCONTACT.CONTACT2EMAILColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string POINTID {
                get {
                    return ((string)(this[this.tableCONTACT.POINTIDColumn]));
                }
                set {
                    this[this.tableCONTACT.POINTIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CONTACTS_Id {
                get {
                    try {
                        return ((int)(this[this.tableCONTACT.CONTACTS_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CONTACTS_Id\' in table \'CONTACT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONTACT.CONTACTS_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONTACTSRow CONTACTSRow {
                get {
                    return ((CONTACTSRow)(this.GetParentRow(this.Table.ParentRelations["CONTACTS_CONTACT"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CONTACTS_CONTACT"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONTACTS_IdNull() {
                return this.IsNull(this.tableCONTACT.CONTACTS_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONTACTS_IdNull() {
                this[this.tableCONTACT.CONTACTS_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BUSINESSOBJECTRowChangeEvent : global::System.EventArgs {
            
            private BUSINESSOBJECTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BUSINESSOBJECTRowChangeEvent(BUSINESSOBJECTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BUSINESSOBJECTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DATARowChangeEvent : global::System.EventArgs {
            
            private DATARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DATARowChangeEvent(DATARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DATARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CONTACTSRowChangeEvent : global::System.EventArgs {
            
            private CONTACTSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONTACTSRowChangeEvent(CONTACTSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONTACTSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CONTACTRowChangeEvent : global::System.EventArgs {
            
            private CONTACTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONTACTRowChangeEvent(CONTACTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONTACTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591